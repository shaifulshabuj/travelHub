version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: travelhub
      POSTGRES_USER: travelhub
      POSTGRES_PASSWORD: travelhub123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U travelhub"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: travelhub
      MONGO_INITDB_ROOT_PASSWORD: travelhub123
      MONGO_INITDB_DATABASE: travelhub
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - travelhub-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - travelhub-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - travelhub-network

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - travelhub-network
    depends_on:
      - prometheus

  # Evolution Engine
  evolution-engine:
    build:
      context: ../backend/evolution-service
      dockerfile: Dockerfile
    ports:
      - "8090:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      POSTGRES_URL: jdbc:postgresql://postgres:5432/travelhub
      POSTGRES_USERNAME: travelhub
      POSTGRES_PASSWORD: travelhub123
      EVOLUTION_ENABLED: true
      GENETIC_ALGORITHM_POPULATION_SIZE: 20
      GENETIC_ALGORITHM_GENERATIONS: 100
      FITNESS_THRESHOLD: 0.8
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  user-service:
    build:
      context: ../backend/user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/travelhub
      DATABASE_USERNAME: travelhub
      DATABASE_PASSWORD: travelhub123
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EVOLUTION_ENGINE_URL: http://evolution-engine:8080
      SERVICE_DNA_GENERATION: 1
    depends_on:
      - postgres
      - redis
      - kafka
      - evolution-engine
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  flight-service:
    build:
      context: ../backend/flight-service
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGODB_URI: mongodb://travelhub:travelhub123@mongodb:27017/travelhub?authSource=admin
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EVOLUTION_ENGINE_URL: http://evolution-engine:8080
      SERVICE_DNA_GENERATION: 1
      FLIGHT_API_PROVIDER: amadeus
    depends_on:
      - mongodb
      - redis
      - kafka
      - evolution-engine
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8080
      REACT_APP_USER_SERVICE_URL: http://localhost:8081
      REACT_APP_FLIGHT_SERVICE_URL: http://localhost:8082
      REACT_APP_EVOLUTION_ENABLED: true
      REACT_APP_ENVIRONMENT: docker
    depends_on:
      - user-service
      - flight-service
    networks:
      - travelhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  travelhub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16